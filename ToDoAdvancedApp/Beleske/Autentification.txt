Autentifikacija ?

Statefull session

User sends request to server 
Server creates session ID and sends to user
Browser put sesion ID in cookie
Browser send cookies with future request

FAULTS
	- CSRF (Cross Site Request Forgery)  forgery - falsifikat, lazan


JWT (JSON Virtual Token)

User sends request to the server
Server creates JWT and sends back to the User
User saves the token in the browser and sends signature in header




UserSchema.methods.toJson = ()=>{
    const user = this;
    const userObject = user.toObject();

    // return the document except the password and session (these shouldnt be made available)
    _.omit(userObject,['password','session']);

}


UserSchema.methods.generateAccessAuthToken = ()=>{
    const user = this;
    return new Promise((resolve,reject)=>{
        // Create JSON Web Token
        jwt.sign({_id:user._id.toHexString()},jwtSecret,{expiresIn:"15m"},(err,token)=>{
            if(!err){
                resolve(token);
            }
            else{
                reject();
            }
        })
    })
}

UserSchema.mathods.generateRefreshAuthToken = ()=>{
    return new Promise((resolve,reject)=>{
        crypto.randomBytes(64,(err,buf)=>{
            if(!err){
                // no err
                let token = buf.toString('hex');

                return resolve(token);
            }
            else{
                return reject();
            }
        })
    })
}

// Model methods (static method)
UserSchema.statics.findByIdAndToken = ()=>{
    const user = this;
    user.findOne({
        _id,
        'session.token':token
    })
}

UserSchema.static.findByCredentials = (email, password)=>{
    const user = this;

}

// Middleware
UserSchema.pre('save',async function(next){
    let user = this;
})

UserSchema.methods.createSession = ()=>{
    let user = this;
    return user.generateRefreshAuthToken()
            .then(refreshToken=>{
                return saveSessionToDataBase(user,refreshToken)
                    .then(refreshToken=>{
                        return refreshToken;
                    })
                    .catch(err=>{
                        return reject(err);
                    })
            })
}

let saveSessionToDataBase = (user,refreshToken) =>{
    // save session to database
    return new Promise((resolve,reject)=>{
        let expiresAt = generateRefreshTokenExpiryTime();
        user.sessions.push({'token':refreshToken,expiresAt:expiresAt})

        user.save()
            .then(()=>{
                // saved session successfully
                return resolve(refreshToken);
            })
            .catch(err=>{
                reject(e);
            })
    })
}

let generateRefreshTokenExpiryTime = ()=>{
    let daysUntilExpire = "";
    let secondsUntilExpirse = daysUntilExpire * 24 * 60 *60;
    return ((Date.now() /1000) + secondsUntilExpirse); 
}